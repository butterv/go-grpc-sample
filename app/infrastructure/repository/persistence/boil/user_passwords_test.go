// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boil

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserPasswords(t *testing.T) {
	t.Parallel()

	query := UserPasswords()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserPasswordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPasswordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserPasswords().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPasswordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPasswordSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPasswordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserPasswordExists(ctx, tx, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if UserPassword exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserPasswordExists to return true, but got false.")
	}
}

func testUserPasswordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userPasswordFound, err := FindUserPassword(ctx, tx, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if userPasswordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserPasswordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserPasswords().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserPasswordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserPasswords().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserPasswordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userPasswordOne := &UserPassword{}
	userPasswordTwo := &UserPassword{}
	if err = randomize.Struct(seed, userPasswordOne, userPasswordDBTypes, false, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}
	if err = randomize.Struct(seed, userPasswordTwo, userPasswordDBTypes, false, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPasswordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPasswordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPasswords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserPasswordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userPasswordOne := &UserPassword{}
	userPasswordTwo := &UserPassword{}
	if err = randomize.Struct(seed, userPasswordOne, userPasswordDBTypes, false, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}
	if err = randomize.Struct(seed, userPasswordTwo, userPasswordDBTypes, false, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPasswordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPasswordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userPasswordBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func userPasswordAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPassword) error {
	*o = UserPassword{}
	return nil
}

func testUserPasswordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserPassword{}
	o := &UserPassword{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userPasswordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserPassword object: %s", err)
	}

	AddUserPasswordHook(boil.BeforeInsertHook, userPasswordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userPasswordBeforeInsertHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.AfterInsertHook, userPasswordAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userPasswordAfterInsertHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.AfterSelectHook, userPasswordAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userPasswordAfterSelectHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.BeforeUpdateHook, userPasswordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userPasswordBeforeUpdateHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.AfterUpdateHook, userPasswordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userPasswordAfterUpdateHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.BeforeDeleteHook, userPasswordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userPasswordBeforeDeleteHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.AfterDeleteHook, userPasswordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userPasswordAfterDeleteHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.BeforeUpsertHook, userPasswordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userPasswordBeforeUpsertHooks = []UserPasswordHook{}

	AddUserPasswordHook(boil.AfterUpsertHook, userPasswordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userPasswordAfterUpsertHooks = []UserPasswordHook{}
}

func testUserPasswordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPasswordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userPasswordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPasswordToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPassword
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPasswordDBTypes, false, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserPasswordSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserPassword)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserPasswordToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPassword
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPasswordDBTypes, false, strmangle.SetComplement(userPasswordPrimaryKeyColumns, userPasswordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPassword != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserPasswordExists(ctx, tx, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserPasswordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPasswordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPasswordSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPasswordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPasswords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userPasswordDBTypes = map[string]string{`UserID`: `varchar`, `PasswordHash`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                   = bytes.MinRead
)

func testUserPasswordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userPasswordAllColumns) == len(userPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserPasswordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userPasswordAllColumns) == len(userPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPassword{}
	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPasswordDBTypes, true, userPasswordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userPasswordAllColumns, userPasswordPrimaryKeyColumns) {
		fields = userPasswordAllColumns
	} else {
		fields = strmangle.SetComplement(
			userPasswordAllColumns,
			userPasswordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserPasswordSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserPasswordsUpsert(t *testing.T) {
	t.Parallel()

	if len(userPasswordAllColumns) == len(userPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserPasswordUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserPassword{}
	if err = randomize.Struct(seed, &o, userPasswordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPassword: %s", err)
	}

	count, err := UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userPasswordDBTypes, false, userPasswordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPassword struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPassword: %s", err)
	}

	count, err = UserPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
